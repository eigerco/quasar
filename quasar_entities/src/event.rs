//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.3
use async_graphql::ComplexObject;
use sea_orm::{entity::prelude::*, ActiveValue, Set};
use stellar_xdr::{ContractEvent, Error, ScVal};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, async_graphql::SimpleObject)]
#[sea_orm(table_name = "events")]
#[graphql(complex)]
#[graphql(name = "Events")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub topic: String,
    pub contract_id: String,
    pub ledger: i32,
    pub value: Json,
    pub r#type: String,
}

#[ComplexObject]
impl Model {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

impl TryFrom<ContractEvent> for ActiveModel {
    type Error = Error;

    fn try_from(event: ContractEvent) -> Result<Self, Self::Error> {
        let topic: Vec<String> = match &event.body {
            stellar_xdr::ContractEventBody::V0(body) => {
                body.topics.iter().map(|topic| match topic {
                    ScVal::String(topic) => topic.to_string().unwrap(),
                    _ => {
                        panic!("not a symbol")
                    }
                })
            }
        }
        .collect();
        Ok(Self {
            id: ActiveValue::NotSet,
            topic: ActiveValue::Set(topic.join(",")),
            contract_id: Set(event.contract_id.unwrap().to_string()),
            ledger: ActiveValue::NotSet,
            value: ActiveValue::NotSet,
            r#type: Set(event.type_.to_string()),
        })
    }
}
